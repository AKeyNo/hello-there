datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String    @id @default(cuid())
  username   String? @unique
  firstName  String?
  lastName   String?
  aboutMe    String?
  location   String?
  joinDate   DateTime?
  followedBy User[]    @relation("UserFollows")
  following  User[]    @relation("UserFollows")

  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Sayings        Saying[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Saying {
  id                String   @id @default(cuid())
  creatorID         String
  repliedToSayingID String?
  text              String
  createdAt         DateTime @default(now())
  creator           User     @relation(fields: [creatorID], references: [id], onDelete: Cascade)
  repliedToSaying   Saying?  @relation("SayingResponses", fields: [repliedToSayingID], references: [id], onDelete: Cascade)
  responseSayings   Saying[] @relation("SayingResponses")
}
